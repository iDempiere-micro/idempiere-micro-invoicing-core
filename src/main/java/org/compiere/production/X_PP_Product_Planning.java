package org.compiere.production;

import kotliquery.Row;
import org.compiere.orm.MTable;
import org.compiere.orm.PO;
import org.eevolution.model.I_PP_Product_Planning;
import org.idempiere.common.util.Env;

import java.math.BigDecimal;
import java.util.Properties;

/**
 * Generated Model for PP_Product_Planning
 *
 * @author iDempiere (generated)
 * @version Release 5.1 - $Id$
 */
public class X_PP_Product_Planning extends PO implements I_PP_Product_Planning {

    /**
     * Fixed Order Quantity = FOQ
     */
    public static final String ORDER_POLICY_FixedOrderQuantity = "FOQ";
    /**
     * Lot-for-Lot = LFL
     */
    public static final String ORDER_POLICY_Lot_For_Lot = "LFL";
    /**
     * Period Order Quantity = POQ
     */
    public static final String ORDER_POLICY_PeriodOrderQuantity = "POQ";
    /**
     *
     */
    private static final long serialVersionUID = 20171031L;

    /**
     * Standard Constructor
     */
    public X_PP_Product_Planning(Properties ctx, int PP_Product_Planning_ID) {
        super(ctx, PP_Product_Planning_ID);
    }


    /**
     * Load Constructor
     */
    public X_PP_Product_Planning(Properties ctx, Row row) {
        super(ctx, row);
    }

    /**
     * AccessLevel
     *
     * @return 3 - Client - Org
     */
    protected int getAccessLevel() {
        return accessLevel.intValue();
    }

    @Override
    public int getTableId() {
        return Table_ID;
    }

    public String toString() {
        return "X_PP_Product_Planning[" + getId() + "]";
    }

    public org.compiere.model.I_AD_Workflow getAD_Workflow() throws RuntimeException {
        return (org.compiere.model.I_AD_Workflow)
                MTable.get(getCtx(), org.compiere.model.I_AD_Workflow.Table_Name)
                        .getPO(getAD_Workflow_ID());
    }

    /**
     * Get Workflow.
     *
     * @return Workflow or combination of tasks
     */
    public int getAD_Workflow_ID() {
        Integer ii = (Integer) getValue(COLUMNNAME_AD_Workflow_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Workflow.
     *
     * @param AD_Workflow_ID Workflow or combination of tasks
     */
    public void setAD_Workflow_ID(int AD_Workflow_ID) {
        if (AD_Workflow_ID < 1) setValue(COLUMNNAME_AD_Workflow_ID, null);
        else setValue(COLUMNNAME_AD_Workflow_ID, Integer.valueOf(AD_Workflow_ID));
    }

    public org.eevolution.model.I_DD_NetworkDistribution getDD_NetworkDistribution()
            throws RuntimeException {
        return (org.eevolution.model.I_DD_NetworkDistribution)
                MTable.get(getCtx(), org.eevolution.model.I_DD_NetworkDistribution.Table_Name)
                        .getPO(getDD_NetworkDistribution_ID());
    }

    /**
     * Get Network Distribution.
     *
     * @return Network Distribution
     */
    public int getDD_NetworkDistribution_ID() {
        Integer ii = (Integer) getValue(COLUMNNAME_DD_NetworkDistribution_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Network Distribution.
     *
     * @param DD_NetworkDistribution_ID Network Distribution
     */
    public void setDD_NetworkDistribution_ID(int DD_NetworkDistribution_ID) {
        if (DD_NetworkDistribution_ID < 1) setValue(COLUMNNAME_DD_NetworkDistribution_ID, null);
        else
            setValue(COLUMNNAME_DD_NetworkDistribution_ID, Integer.valueOf(DD_NetworkDistribution_ID));
    }

    /**
     * Get Promised Delivery Time.
     *
     * @return Promised days between order and delivery
     */
    public BigDecimal getDeliveryTime_Promised() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_DeliveryTime_Promised);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Promised Delivery Time.
     *
     * @param DeliveryTime_Promised Promised days between order and delivery
     */
    public void setDeliveryTime_Promised(BigDecimal DeliveryTime_Promised) {
        setValue(COLUMNNAME_DeliveryTime_Promised, DeliveryTime_Promised);
    }

    /**
     * Set Create Plan.
     *
     * @param IsCreatePlan Indicates whether planned orders will be generated by MRP
     */
    public void setIsCreatePlan(boolean IsCreatePlan) {
        setValue(COLUMNNAME_IsCreatePlan, Boolean.valueOf(IsCreatePlan));
    }

    /**
     * Get Create Plan.
     *
     * @return Indicates whether planned orders will be generated by MRP
     */
    public boolean isCreatePlan() {
        Object oo = getValue(COLUMNNAME_IsCreatePlan);
        if (oo != null) {
            if (oo instanceof Boolean) return ((Boolean) oo).booleanValue();
            return "Y".equals(oo);
        }
        return false;
    }

    /**
     * Set Is MPS.
     *
     * @param IsMPS Is MPS
     */
    public void setIsMPS(boolean IsMPS) {
        setValue(COLUMNNAME_IsMPS, Boolean.valueOf(IsMPS));
    }

    /**
     * Get Is MPS.
     *
     * @return Is MPS
     */
    public boolean isMPS() {
        Object oo = getValue(COLUMNNAME_IsMPS);
        if (oo != null) {
            if (oo instanceof Boolean) return ((Boolean) oo).booleanValue();
            return "Y".equals(oo);
        }
        return false;
    }

    /**
     * Set Phantom.
     *
     * @param IsPhantom Phantom Component
     */
    public void setIsPhantom(boolean IsPhantom) {
        setValue(COLUMNNAME_IsPhantom, Boolean.valueOf(IsPhantom));
    }

    /**
     * Get Phantom.
     *
     * @return Phantom Component
     */
    public boolean isPhantom() {
        Object oo = getValue(COLUMNNAME_IsPhantom);
        if (oo != null) {
            if (oo instanceof Boolean) return ((Boolean) oo).booleanValue();
            return "Y".equals(oo);
        }
        return false;
    }

    /**
     * Set Required Calculate DRP.
     *
     * @param IsRequiredDRP Required Calculate DRP
     */
    public void setIsRequiredDRP(boolean IsRequiredDRP) {
        setValueNoCheck(COLUMNNAME_IsRequiredDRP, Boolean.valueOf(IsRequiredDRP));
    }

    /**
     * Get Required Calculate DRP.
     *
     * @return Required Calculate DRP
     */
    public boolean isRequiredDRP() {
        Object oo = getValue(COLUMNNAME_IsRequiredDRP);
        if (oo != null) {
            if (oo instanceof Boolean) return ((Boolean) oo).booleanValue();
            return "Y".equals(oo);
        }
        return false;
    }

    /**
     * Set Required Calculate MRP.
     *
     * @param IsRequiredMRP Required Calculate MRP
     */
    public void setIsRequiredMRP(boolean IsRequiredMRP) {
        setValueNoCheck(COLUMNNAME_IsRequiredMRP, Boolean.valueOf(IsRequiredMRP));
    }

    /**
     * Get Required Calculate MRP.
     *
     * @return Required Calculate MRP
     */
    public boolean isRequiredMRP() {
        Object oo = getValue(COLUMNNAME_IsRequiredMRP);
        if (oo != null) {
            if (oo instanceof Boolean) return ((Boolean) oo).booleanValue();
            return "Y".equals(oo);
        }
        return false;
    }

    public org.compiere.model.I_M_Product getM_Product() throws RuntimeException {
        return (org.compiere.model.I_M_Product)
                MTable.get(getCtx(), org.compiere.model.I_M_Product.Table_Name)
                        .getPO(getM_Product_ID());
    }

    /**
     * Get Product.
     *
     * @return Product, Service, Item
     */
    public int getM_Product_ID() {
        Integer ii = (Integer) getValue(COLUMNNAME_M_Product_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Product.
     *
     * @param M_Product_ID Product, Service, Item
     */
    public void setM_Product_ID(int M_Product_ID) {
        if (M_Product_ID < 1) setValueNoCheck(COLUMNNAME_M_Product_ID, null);
        else setValueNoCheck(COLUMNNAME_M_Product_ID, Integer.valueOf(M_Product_ID));
    }

    public org.compiere.model.I_M_Warehouse getM_Warehouse() throws RuntimeException {
        return (org.compiere.model.I_M_Warehouse)
                MTable.get(getCtx(), org.compiere.model.I_M_Warehouse.Table_Name)
                        .getPO(getWarehouseId());
    }

    /**
     * Get Warehouse.
     *
     * @return Storage Warehouse and Service Point
     */
    public int getWarehouseId() {
        Integer ii = (Integer) getValue(COLUMNNAME_M_Warehouse_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Warehouse.
     *
     * @param M_Warehouse_ID Storage Warehouse and Service Point
     */
    public void setWarehouseId(int M_Warehouse_ID) {
        if (M_Warehouse_ID < 1) setValue(COLUMNNAME_M_Warehouse_ID, null);
        else setValue(COLUMNNAME_M_Warehouse_ID, Integer.valueOf(M_Warehouse_ID));
    }

    /**
     * Get Maximum Order Qty.
     *
     * @return Maximum order quantity in UOM
     */
    public BigDecimal getOrder_Max() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_Order_Max);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Maximum Order Qty.
     *
     * @param Order_Max Maximum order quantity in UOM
     */
    public void setOrder_Max(BigDecimal Order_Max) {
        setValue(COLUMNNAME_Order_Max, Order_Max);
    }

    /**
     * Get Minimum Order Qty.
     *
     * @return Minimum order quantity in UOM
     */
    public BigDecimal getOrder_Min() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_Order_Min);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Minimum Order Qty.
     *
     * @param Order_Min Minimum order quantity in UOM
     */
    public void setOrder_Min(BigDecimal Order_Min) {
        setValue(COLUMNNAME_Order_Min, Order_Min);
    }

    /**
     * Get Order Pack Qty.
     *
     * @return Package order size in UOM (e.g. order set of 5 units)
     */
    public BigDecimal getOrder_Pack() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_Order_Pack);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Order Pack Qty.
     *
     * @param Order_Pack Package order size in UOM (e.g. order set of 5 units)
     */
    public void setOrder_Pack(BigDecimal Order_Pack) {
        setValue(COLUMNNAME_Order_Pack, Order_Pack);
    }

    /**
     * Get Order Period.
     *
     * @return Order Period
     */
    public BigDecimal getOrder_Period() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_Order_Period);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Order Period.
     *
     * @param Order_Period Order Period
     */
    public void setOrder_Period(BigDecimal Order_Period) {
        setValue(COLUMNNAME_Order_Period, Order_Period);
    }

    /**
     * Get Order Policy.
     *
     * @return Order Policy
     */
    public String getOrder_Policy() {
        return (String) getValue(COLUMNNAME_Order_Policy);
    }

    /**
     * Set Order Policy.
     *
     * @param Order_Policy Order Policy
     */
    public void setOrder_Policy(String Order_Policy) {

        setValue(COLUMNNAME_Order_Policy, Order_Policy);
    }

    /**
     * Get Order Qty.
     *
     * @return Order Qty
     */
    public BigDecimal getOrder_Qty() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_Order_Qty);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Order Qty.
     *
     * @param Order_Qty Order Qty
     */
    public void setOrder_Qty(BigDecimal Order_Qty) {
        setValue(COLUMNNAME_Order_Qty, Order_Qty);
    }

    public org.compiere.model.I_AD_User getPlanner() throws RuntimeException {
        return (org.compiere.model.I_AD_User)
                MTable.get(getCtx(), org.compiere.model.I_AD_User.Table_Name)
                        .getPO(getPlanner_ID());
    }

    /**
     * Get Planner.
     *
     * @return Planner
     */
    public int getPlanner_ID() {
        Integer ii = (Integer) getValue(COLUMNNAME_Planner_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Planner.
     *
     * @param Planner_ID Planner
     */
    public void setPlanner_ID(int Planner_ID) {
        if (Planner_ID < 1) setValue(COLUMNNAME_Planner_ID, null);
        else setValue(COLUMNNAME_Planner_ID, Integer.valueOf(Planner_ID));
    }

    public org.eevolution.model.I_PP_Product_BOM getPP_Product_BOM() throws RuntimeException {
        return (org.eevolution.model.I_PP_Product_BOM)
                MTable.get(getCtx(), org.eevolution.model.I_PP_Product_BOM.Table_Name)
                        .getPO(getPP_Product_BOM_ID());
    }

    /**
     * Get BOM & Formula.
     *
     * @return BOM & Formula
     */
    public int getPP_Product_BOM_ID() {
        Integer ii = (Integer) getValue(COLUMNNAME_PP_Product_BOM_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set BOM & Formula.
     *
     * @param PP_Product_BOM_ID BOM & Formula
     */
    public void setPP_Product_BOM_ID(int PP_Product_BOM_ID) {
        if (PP_Product_BOM_ID < 1) setValue(COLUMNNAME_PP_Product_BOM_ID, null);
        else setValue(COLUMNNAME_PP_Product_BOM_ID, Integer.valueOf(PP_Product_BOM_ID));
    }

    /**
     * Get Product Planning.
     *
     * @return Product Planning
     */
    public int getPP_Product_Planning_ID() {
        Integer ii = (Integer) getValue(COLUMNNAME_PP_Product_Planning_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Product Planning.
     *
     * @param PP_Product_Planning_ID Product Planning
     */
    public void setPP_Product_Planning_ID(int PP_Product_Planning_ID) {
        if (PP_Product_Planning_ID < 1) setValueNoCheck(COLUMNNAME_PP_Product_Planning_ID, null);
        else
            setValueNoCheck(COLUMNNAME_PP_Product_Planning_ID, Integer.valueOf(PP_Product_Planning_ID));
    }

    /**
     * Get PP_Product_Planning_UU.
     *
     * @return PP_Product_Planning_UU
     */
    public String getPP_Product_Planning_UU() {
        return (String) getValue(COLUMNNAME_PP_Product_Planning_UU);
    }

    /**
     * Set PP_Product_Planning_UU.
     *
     * @param PP_Product_Planning_UU PP_Product_Planning_UU
     */
    public void setPP_Product_Planning_UU(String PP_Product_Planning_UU) {
        setValue(COLUMNNAME_PP_Product_Planning_UU, PP_Product_Planning_UU);
    }

    /**
     * Get Safety Stock Qty.
     *
     * @return Safety stock is a term used to describe a level of stock that is maintained below the
     * cycle stock to buffer against stock-outs
     */
    public BigDecimal getSafetyStock() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_SafetyStock);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Safety Stock Qty.
     *
     * @param SafetyStock Safety stock is a term used to describe a level of stock that is maintained
     *                    below the cycle stock to buffer against stock-outs
     */
    public void setSafetyStock(BigDecimal SafetyStock) {
        setValue(COLUMNNAME_SafetyStock, SafetyStock);
    }

    public org.compiere.model.I_S_Resource getS_Resource() throws RuntimeException {
        return (org.compiere.model.I_S_Resource)
                MTable.get(getCtx(), org.compiere.model.I_S_Resource.Table_Name)
                        .getPO(getS_Resource_ID());
    }

    /**
     * Get Resource.
     *
     * @return Resource
     */
    public int getS_Resource_ID() {
        Integer ii = (Integer) getValue(COLUMNNAME_S_Resource_ID);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Resource.
     *
     * @param S_Resource_ID Resource
     */
    public void setS_Resource_ID(int S_Resource_ID) {
        if (S_Resource_ID < 1) setValueNoCheck(COLUMNNAME_S_Resource_ID, null);
        else setValueNoCheck(COLUMNNAME_S_Resource_ID, S_Resource_ID);
    }

    /**
     * Get Time Fence.
     *
     * @return Time Fence
     */
    public BigDecimal getTimeFence() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_TimeFence);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Time Fence.
     *
     * @param TimeFence Time Fence
     */
    public void setTimeFence(BigDecimal TimeFence) {
        setValue(COLUMNNAME_TimeFence, TimeFence);
    }

    /**
     * Get Transfert Time.
     *
     * @return Transfert Time
     */
    public BigDecimal getTransfertTime() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_TransfertTime);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Transfert Time.
     *
     * @param TransfertTime Transfert Time
     */
    public void setTransfertTime(BigDecimal TransfertTime) {
        setValue(COLUMNNAME_TransfertTime, TransfertTime);
    }

    /**
     * Get Working Time.
     *
     * @return Workflow Simulation Execution Time
     */
    public BigDecimal getWorkingTime() {
        BigDecimal bd = (BigDecimal) getValue(COLUMNNAME_WorkingTime);
        if (bd == null) return Env.ZERO;
        return bd;
    }

    /**
     * Set Working Time.
     *
     * @param WorkingTime Workflow Simulation Execution Time
     */
    public void setWorkingTime(BigDecimal WorkingTime) {
        setValue(COLUMNNAME_WorkingTime, WorkingTime);
    }

    /**
     * Get Yield %.
     *
     * @return The Yield is the percentage of a lot that is expected to be of acceptable wuality may
     * fall below 100 percent
     */
    public int getYield() {
        Integer ii = (Integer) getValue(COLUMNNAME_Yield);
        if (ii == null) return 0;
        return ii;
    }

    /**
     * Set Yield %.
     *
     * @param Yield The Yield is the percentage of a lot that is expected to be of acceptable wuality
     *              may fall below 100 percent
     */
    public void setYield(int Yield) {
        setValue(COLUMNNAME_Yield, Integer.valueOf(Yield));
    }
}
