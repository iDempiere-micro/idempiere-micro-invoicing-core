package org.compiere.invoicing;

import kotliquery.Row;
import org.compiere.accounting.MStorageOnHand;
import org.compiere.model.I_M_Inventory;
import org.compiere.model.I_M_InventoryLine;
import org.compiere.model.I_M_InventoryLineMA;
import org.compiere.orm.Query;
import org.idempiere.common.util.CLogger;
import org.idempiere.common.util.Env;
import org.idempiere.common.util.Util;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Properties;

import static software.hsharp.core.util.DBKt.executeUpdate;
import static software.hsharp.core.util.DBKt.getSQLValueBD;

/**
 * Inventory Material Allocation
 *
 * @author Jorg Janke
 * @version $Id: MInventoryLineMA.java,v 1.3 2006/07/30 00:51:04 jjanke Exp $
 */
public class MInventoryLineMA extends X_M_InventoryLineMA {
    /**
     *
     */
    private static final long serialVersionUID = -5654504108476140057L;
    /**
     * Logger
     */
    private static CLogger s_log = CLogger.getCLogger(MInventoryLineMA.class);

    /**
     * ************************************************************************ Standard Constructor
     *
     * @param ctx                  context
     * @param M_InventoryLineMA_ID ignored
     */
    public MInventoryLineMA(Properties ctx, int M_InventoryLineMA_ID) {
        super(ctx, M_InventoryLineMA_ID);
        if (M_InventoryLineMA_ID != 0) throw new IllegalArgumentException("Multi-Key");
    } //	MInventoryLineMA

    /**
     * Load Cosntructor
     *
     * @param ctx context
     */
    public MInventoryLineMA(Properties ctx, Row row) {
        super(ctx, row);
    } //	MInventoryLineMA

    /**
     * Parent Constructor
     *
     * @param parent                    parent
     * @param M_AttributeSetInstance_ID asi
     * @param MovementQty               qty
     * @param DateMaterialPolicy
     */
    public MInventoryLineMA(
            MInventoryLine parent,
            int M_AttributeSetInstance_ID,
            BigDecimal MovementQty,
            Timestamp DateMaterialPolicy) {
        this(parent, M_AttributeSetInstance_ID, MovementQty, DateMaterialPolicy, true);
    }

    /**
     * @param parent
     * @param M_AttributeSetInstance_ID
     * @param MovementQty
     * @param DateMaterialPolicy
     * @param isAutoGenerated
     */
    public MInventoryLineMA(
            MInventoryLine parent,
            int M_AttributeSetInstance_ID,
            BigDecimal MovementQty,
            Timestamp DateMaterialPolicy,
            boolean isAutoGenerated) {
        this(parent.getCtx(), 0);
        setClientOrg(parent);
        setInventoryLineId(parent.getInventoryLineId());
        //
        setAttributeSetInstanceId(M_AttributeSetInstance_ID);
        setMovementQty(MovementQty);
        if (DateMaterialPolicy == null) {
            if (M_AttributeSetInstance_ID > 0) {
                DateMaterialPolicy =
                        MStorageOnHand.getDateMaterialPolicy(
                                parent.getProductId(), M_AttributeSetInstance_ID);
            }
            if (DateMaterialPolicy == null) {
                DateMaterialPolicy = parent.getParent().getMovementDate();
            }
        }
        setDateMaterialPolicy(DateMaterialPolicy);
        setIsAutoGenerated(isAutoGenerated);
    } //	MInventoryLineMA

    /**
     * Get Material Allocations for Line
     *
     * @param ctx                context
     * @param M_InventoryLine_ID line
     * @return allocations
     */
    public static MInventoryLineMA[] get(Properties ctx, int M_InventoryLine_ID) {
        return BaseInventoryMaterialAllocationKt.getMaterialAllocationsForLine(ctx, M_InventoryLine_ID);
    } //	get

    /**
     * Delete all Material Allocation for Inventory
     *
     * @param M_Inventory_ID inventory
     * @param trxName        transaction
     * @return number of rows deleted or -1 for error
     */
    public static int deleteInventoryMA(int M_Inventory_ID) {
        StringBuilder sql =
                new StringBuilder("DELETE FROM M_InventoryLineMA ma WHERE EXISTS ")
                        .append(
                                "(SELECT * FROM M_InventoryLine l WHERE l.M_InventoryLine_ID=ma.M_InventoryLine_ID")
                        .append(" AND M_Inventory_ID=")
                        .append(M_Inventory_ID)
                        .append(")");
        return executeUpdate(sql.toString());
    } //	deleteInventoryMA

    /**
     * Delete all Material Allocation for Inventory
     *
     * @param M_InventoryLine_ID inventory
     * @param trxName            transaction
     * @return number of rows deleted or -1 for error
     */
    public static int deleteInventoryLineMA(int M_InventoryLine_ID) {
        StringBuilder sql =
                new StringBuilder("DELETE FROM M_InventoryLineMA ma WHERE EXISTS ")
                        .append(
                                "(SELECT * FROM M_InventoryLine l WHERE l.M_InventoryLine_ID=ma.M_InventoryLine_ID")
                        .append(" AND M_InventoryLine_ID=")
                        .append(M_InventoryLine_ID)
                        .append(") AND ma.IsAutoGenerated='Y'");
        return executeUpdate(sql.toString());
    } //	deleteInventoryMA

    public static MInventoryLineMA addOrCreate(
            MInventoryLine line,
            int M_AttributeSetInstance_ID,
            BigDecimal MovementQty,
            Timestamp DateMaterialPolicy,
            boolean isAutoGenerated) {
        Query query =
                new Query(
                        Env.getCtx(),
                        I_M_InventoryLineMA.Table_Name,
                        "M_InventoryLine_ID=? AND M_AttributeSetInstance_ID=? AND DateMaterialPolicy=trunc(cast(? as date))"
                );
        MInventoryLineMA po =
                query
                        .setParameters(
                                line.getInventoryLineId(), M_AttributeSetInstance_ID, DateMaterialPolicy)
                        .first();
        if (po == null)
            po =
                    new MInventoryLineMA(
                            line, M_AttributeSetInstance_ID, MovementQty, DateMaterialPolicy, isAutoGenerated);
        else po.setMovementQty(po.getMovementQty().add(MovementQty));
        return po;
    }

    /**
     * @param M_MovementLine_ID
     * @param trxName
     * @return
     */
    public static BigDecimal getManualQty(int M_MovementLine_ID) {
        String sql =
                "SELECT SUM(movementqty) FROM M_InventoryLineMA ma WHERE ma.M_InventoryLine_ID=? AND IsAutoGenerated='N'";
        BigDecimal totalQty = getSQLValueBD(sql, M_MovementLine_ID);
        return totalQty == null ? Env.ZERO : totalQty.negate();
    } // totalLineQty

    @Override
    public void setDateMaterialPolicy(Timestamp DateMaterialPolicy) {
        if (DateMaterialPolicy != null) DateMaterialPolicy = Util.removeTime(DateMaterialPolicy);
        super.setDateMaterialPolicy(DateMaterialPolicy);
    }

    /**
     * String Representation
     *
     * @return info
     */
    public String toString() {
        StringBuilder sb = new StringBuilder("MInventoryLineMA[");
        sb.append("M_InventoryLine_ID=")
                .append(getInventoryLineId())
                .append(",M_AttributeSetInstance_ID=")
                .append(getAttributeSetInstanceId())
                .append(", Qty=")
                .append(getMovementQty())
                .append("]");
        return sb.toString();
    } //	toString

    /**
     * ************************************************************************ Before Save
     *
     * @param newRecord new
     * @return save
     */
    protected boolean beforeSave(boolean newRecord) {
        // Set DateMaterialPolicy
        if (!newRecord && isValueChanged(I_M_InventoryLineMA.COLUMNNAME_M_AttributeSetInstance_ID)) {
            I_M_InventoryLine line = getInventoryLine();

            Timestamp dateMPolicy = null;
            if (getAttributeSetInstanceId() > 0) {
                dateMPolicy =
                        MStorageOnHand.getDateMaterialPolicy(
                                line.getProductId(), getAttributeSetInstanceId());
            }

            if (dateMPolicy == null) {
                I_M_Inventory inventory = line.getInventory();
                dateMPolicy = inventory.getMovementDate();
            }

            setDateMaterialPolicy(dateMPolicy);
        }

        return true;
    } // beforeSave
} //	MInventoryLineMA
