package org.compiere.invoicing;

import kotliquery.Row;
import org.compiere.accounting.MStorageOnHand;
import org.compiere.model.I_M_InOut;
import org.compiere.model.I_M_InOutLine;
import org.compiere.model.I_M_InOutLineMA;
import org.compiere.model.I_Query;
import org.compiere.order.MInOutLine;
import software.hsharp.core.orm.MBaseTableKt;
import org.compiere.orm.Query;
import org.idempiere.common.util.Env;
import org.idempiere.common.util.Util;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;

import static software.hsharp.core.util.DBKt.executeUpdate;
import static software.hsharp.core.util.DBKt.getSQLValueBD;

/**
 * Shipment Material Allocation
 *
 * @author Jorg Janke
 * @version $Id: MInOutLineMA.java,v 1.3 2006/07/30 00:51:02 jjanke Exp $
 */
public class MInOutLineMA extends X_M_InOutLineMA {
    /**
     *
     */
    private static final long serialVersionUID = -2610075295914545809L;

    /**
     * ************************************************************************ Standard Constructor
     *
     * @param M_InOutLineMA_ID ignored
     */
    public MInOutLineMA(int M_InOutLineMA_ID) {
        super(M_InOutLineMA_ID);
        if (M_InOutLineMA_ID != 0) throw new IllegalArgumentException("Multi-Key");
    } //	MInOutLineMA

    /**
     * Load Constructor
     *
     */
    public MInOutLineMA(Row row) {
        super(row);
    } //	MInOutLineMA

    //	/**	Logger	*/
    //	private static CLogger	s_log	= CLogger.getCLogger (MInOutLineMA.class);

    /**
     * Parent Constructor
     *
     * @param parent                    parent
     * @param M_AttributeSetInstance_ID asi
     * @param MovementQty               qty
     * @param DateMaterialPolicy
     */
    public MInOutLineMA(
            MInOutLine parent,
            int M_AttributeSetInstance_ID,
            BigDecimal MovementQty,
            Timestamp DateMaterialPolicy) {
        this(parent, M_AttributeSetInstance_ID, MovementQty, DateMaterialPolicy, true);
    }

    /**
     * @param parent
     * @param M_AttributeSetInstance_ID
     * @param MovementQty
     * @param DateMaterialPolicy
     * @param isAutoGenerated
     */
    public MInOutLineMA(
            I_M_InOutLine parent,
            int M_AttributeSetInstance_ID,
            BigDecimal MovementQty,
            Timestamp DateMaterialPolicy,
            boolean isAutoGenerated) {
        this(0);
        setClientOrg(parent);
        setInOutLineId(parent.getInOutLineId());
        //
        setAttributeSetInstanceId(M_AttributeSetInstance_ID);
        setMovementQty(MovementQty);
        if (DateMaterialPolicy == null) {
            if (M_AttributeSetInstance_ID > 0) {
                DateMaterialPolicy =
                        MStorageOnHand.getDateMaterialPolicy(
                                parent.getProductId(), M_AttributeSetInstance_ID);
            }
            if (DateMaterialPolicy == null) DateMaterialPolicy = parent.getParent().getMovementDate();
        }
        setDateMaterialPolicy(DateMaterialPolicy);
        setIsAutoGenerated(isAutoGenerated);
    } //	MInOutLineMA

    /**
     * Get Material Allocations for Line
     *
     * @param M_InOutLine_ID line
     * @return allocations
     */
    public static I_M_InOutLineMA[] get(int M_InOutLine_ID) {
        I_Query<I_M_InOutLineMA> query =
                MBaseTableKt.getTable(MInOutLineMA.Table_Name)
                        .createQuery(I_M_InOutLineMA.COLUMNNAME_M_InOutLine_ID + "=?");
        query.setParameters(M_InOutLine_ID);
        List<I_M_InOutLineMA> list = query.list();
        I_M_InOutLineMA[] retValue = new I_M_InOutLineMA[list.size()];
        list.toArray(retValue);
        return retValue;
    } //	get

    /**
     * Delete all Material Allocation for InOutLine
     *
     * @param M_InOutLine_ID Shipment Line
     * @return number of rows deleted or -1 for error
     */
    public static int deleteInOutLineMA(int M_InOutLine_ID) {
        String sql =
                "DELETE FROM M_InOutLineMA ma WHERE ma.M_InOutLine_ID=? AND ma.IsAutoGenerated='Y'";
        return executeUpdate(sql, M_InOutLine_ID);
    } //	deleteInOutLineMA

    public static I_M_InOutLineMA addOrCreate(
            I_M_InOutLine line,
            int M_AttributeSetInstance_ID,
            BigDecimal MovementQty,
            Timestamp DateMaterialPolicy,
            boolean isAutoGenerated) {
        Query<I_M_InOutLineMA> query =
                new Query<>(
                        I_M_InOutLineMA.Table_Name,
                        "M_InOutLine_ID=? AND M_AttributeSetInstance_ID=? AND DateMaterialPolicy=trunc(cast(? as date))"
                );
        I_M_InOutLineMA po =
                query
                        .setParameters(line.getInOutLineId(), M_AttributeSetInstance_ID, DateMaterialPolicy)
                        .first();
        if (po == null)
            po =
                    new MInOutLineMA(
                            line, M_AttributeSetInstance_ID, MovementQty, DateMaterialPolicy, isAutoGenerated);
        else po.setMovementQty(po.getMovementQty().add(MovementQty));
        return po;
    }

    /**
     * Total qty on LineMA for M_InoutLine
     *
     * @param M_InOutLine_ID
     * @return
     */
    public static BigDecimal getManualQty(int M_InOutLine_ID) {
        String sql =
                "SELECT SUM(movementqty) FROM M_InOutLineMA ma WHERE ma.M_InOutLine_ID=? AND ma.IsAutoGenerated='N'";
        BigDecimal totalQty = getSQLValueBD(sql, M_InOutLine_ID);
        return totalQty == null ? Env.ZERO : totalQty;
    } // totalLineQty

    /**
     * Get Material Allocations from shipment which is not returned
     *
     * @param M_InOutLine_ID line
     * @return allocations
     */
    public static MInOutLineMA[] getNonReturned(int M_InOutLine_ID) {
        return MBaseInOutLineMAKt.getMaterialAllocationsFromShipmentWhichIsNotReturned(M_InOutLine_ID);
    } //	getNonReturned

    @Override
    public void setDateMaterialPolicy(Timestamp DateMaterialPolicy) {
        if (DateMaterialPolicy != null) DateMaterialPolicy = Util.removeTime(DateMaterialPolicy);
        super.setDateMaterialPolicy(DateMaterialPolicy);
    }

    /**
     * String Representation
     *
     * @return info
     */
    public String toString() {
        return "MInOutLineMA[" + "M_InOutLine_ID=" +
                getInOutLineId() +
                ",M_AttributeSetInstance_ID=" +
                getAttributeSetInstanceId() +
                ", Qty=" +
                getMovementQty() +
                "]";
    } //	toString

    /**
     * ************************************************************************ Before Save
     *
     * @param newRecord new
     * @return save
     */
    protected boolean beforeSave(boolean newRecord) {
        // Set DateMaterialPolicy
        if (!newRecord && isValueChanged(I_M_InOutLineMA.COLUMNNAME_M_AttributeSetInstance_ID)) {
            // TODO Require testing for all scenario
            I_M_InOutLine line = getInOutLine();

            Timestamp dateMPolicy = null;
            if (getAttributeSetInstanceId() > 0) {
                dateMPolicy =
                        MStorageOnHand.getDateMaterialPolicy(
                                line.getProductId(), getAttributeSetInstanceId());
            }

            if (dateMPolicy == null) {
                I_M_InOut inout = line.getInOut();
                dateMPolicy = inout.getMovementDate();
            }

            setDateMaterialPolicy(dateMPolicy);
        }

        return true;
    } // beforeSave
} //	MInOutLineMA
